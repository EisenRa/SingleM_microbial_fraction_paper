
import os

# Add the parent directory to sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(workflow.snakefile)), '..')))
from tool_reference_data import *

num_threads = 8

tools = ['singlem','microbe_census']

output_prefix = 'output_'
output_dirs = list([output_prefix+tool for tool in tools])
output_dirs_dict = dict(zip(tools, output_dirs))

benchmark_dir = 'benchmarks'

datasets = list(['marine'+str(i) for i in range(10)])
datasets = datasets[:5] # Just use 5, 10 is unnecessary

known_species_fractions = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

fastq_dir = 'local_reads'
truth_dir = os.path.join(workflow.basedir, 'truths')

known_genome_fasta_paths = os.path.join(workflow.basedir, 'shadow_genome_paths.csv')
coverage_definitions_folder = 'coverage_definitions'

novel_genomes_gtdbtk_output_directory = 'gtdbtk_batchfile.random1000.gtdbtk_r207'
novel_genome_list = 'gtdbtk_batchfile.random1000.csv'

##################################################################### things that should be in config

gtdb_bac_taxonomy = '../bac120_taxonomy_r207.tsv'
gtdb_ar_taxonomy = '../ar53_taxonomy_r207.tsv'

#####################################################################

rule all:
    input:
        expand(output_dirs_dict['singlem'] + "/singlem/known{known_percent}/{sample}.smf", known_percent=known_species_fractions, sample=datasets),
        expand(output_dirs_dict['microbe_census'] + "/microbe_census/known{known_percent}/{sample}.tsv", known_percent=known_species_fractions, sample=datasets),
        os.path.join(workflow.basedir, 'genome_sizes.tsv')


# rule all_reads:
# 	input:
# 		expand(fastq_dir + "/known{known_percent}/{sample}.finished", sample=datasets, known_percent=known_species_fractions)
# 	output:
# 		touch(fastq_dir+'/all.done')

# rule generate_community_and_reads:
#     output:
#         r1=fastq_dir + "/known{known_percent}/{sample}.1.fq.gz",
#         r2=fastq_dir + "/known{known_percent}/{sample}.2.fq.gz",
#         condensed = os.path.join(truth_dir, "known{known_percent}/{sample}.condensed"),
#         done = touch(fastq_dir + "/known{known_percent}/{sample}.finished")
#     params:
#         coverage_number = lambda wildcards: wildcards.sample.replace('marine', ''),
#     log:
#         fastq_dir + "/known{known_percent}/{sample}.log"
#     threads: 8
#     resources:
#         mem_mb=8000,
#         runtime='24h'
#     conda:
#         'envs/art.yml'
#     shell:
#         "{workflow.basedir}/generate_community.py " \
#         " --art art_illumina " \
#         " --threads {threads}" \
#         " --coverage-file {workflow.basedir}/coverage_definitions/coverage{params.coverage_number}.tsv" \
#         " --gtdb-bac-metadata {gtdb_bac_metadata} --gtdb-ar-metadata {gtdb_ar_metadata}" \
#         " --known-genome-list {known_genome_fasta_paths}" \
#         " --novel-genome-gtdbtk-output {novel_genomes_gtdbtk_output_directory}" \
#         " --novel-genome-list {novel_genome_list}" \
#         " --output-condensed {output.condensed}" \
#         " -1 {fastq_dir}/known{wildcards.known_percent}/{wildcards.sample}.1.fq.gz"  \
#         " -2 {fastq_dir}/known{wildcards.known_percent}/{wildcards.sample}.2.fq.gz" \
#         " --percent-known {wildcards.known_percent}" \
#         " 2> {log}"

rule singlem_run_to_profile:
    input:
        r1=fastq_dir + "/known{known_percent}/{sample}.1.fq.gz",
        r2=fastq_dir + "/known{known_percent}/{sample}.2.fq.gz",
        db=singlem_metapackage,
    benchmark:
        benchmark_dir + "/singlem/known{known_percent}/{sample}-"+str(num_threads)+"threads.benchmark"
    output:
        report=output_dirs_dict['singlem'] + "/singlem/known{known_percent}/{sample}.profile",
        done=touch(output_dirs_dict['singlem'] + "/singlem/known{known_percent}/{sample}.profile.done")
    conda:
        "envs/singlem.yml"
    threads:
        num_threads
    resources:
        mem_mb=8000,
        runtime='2h',
        db=singlem_metapackage,
    log:
        output_dirs_dict['singlem'] + "/logs/singlem/known{known_percent}/{sample}.log"
    shell:
        "singlem pipe --threads {threads} -1 {input.r1} -2 {input.r2} -p {output.report} --metapackage {input.db} &> {log}"

rule singlem_smf:
    input:
        report=output_dirs_dict['singlem'] + "/singlem/known{known_percent}/{sample}.profile",
        r1=fastq_dir + "/known{known_percent}/{sample}.1.fq.gz",
        r2=fastq_dir + "/known{known_percent}/{sample}.2.fq.gz",
        db=singlem_metapackage,
    output:
        smf=output_dirs_dict['singlem'] + "/singlem/known{known_percent}/{sample}.smf",
        done=touch(output_dirs_dict['singlem'] + "/singlem/known{known_percent}/{sample}.smf.done")
    conda:
        "envs/singlem.yml"
    log:
        output_dirs_dict['singlem'] + "/logs/singlem/known{known_percent}/{sample}.smf.log"
    shell:
        "singlem microbial_fraction --metapackage {input.db} -p {input.report} --forward {input.r1} --reverse {input.r2} >{output.smf} 2> {log}"

rule microbe_census:
    input:
        r1=fastq_dir + "/known{known_percent}/{sample}.1.fq.gz",
        r2=fastq_dir + "/known{known_percent}/{sample}.2.fq.gz",
    benchmark:
        benchmark_dir + "/microbe_census/known{known_percent}/{sample}-"+str(num_threads)+"threads.benchmark"
    output:
        report=output_dirs_dict['microbe_census'] + "/microbe_census/known{known_percent}/{sample}.tsv",
        done=touch(output_dirs_dict['microbe_census'] + "/microbe_census/known{known_percent}/{sample}.tsv.done")
    conda:
        "envs/microbe_census.yml"
    threads:
        1 # not obvious that >1 does anything.
    resources:
        mem_mb=8000,
        runtime='24h'
    log:
        output_dirs_dict['microbe_census'] + "/logs/microbe_census/known{known_percent}/{sample}.log"
    shell:
        "run_microbe_census.py -t {threads} {input.r1},{input.r2} {output.report} &> {log}"

rule calculate_genome_sizes:
    output:
        genome_sizes=os.path.join(workflow.basedir, 'genome_sizes.tsv')
    conda:
        "envs/seqkit.yml"
    shell:
        "seqkit stats -T ../tool_reference_data/new_in_r214/*fna ../reference_genomes/shadow/*a > {output.genome_sizes}"
